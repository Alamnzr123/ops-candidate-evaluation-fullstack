name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  BACKEND_DIR: backend
  FRONTEND_DIR: ops-candidate-evaluation-frontend

jobs:
  backend:
    name: Backend - build & test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ops_evaluation
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Postgres and create DB
        run: |
          echo "Waiting for Postgres to accept connections..."
          for i in {1..60}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U postgres >/dev/null 2>&1; then
              echo "Postgres ready"
              break
            fi
            echo "Postgres not ready yet ($i/60). Sleeping 2s..."
            sleep 2
          done
          # verify and create DB if missing (Postgres doesn't support IF NOT EXISTS for CREATE DATABASE)
          export PGPASSWORD=postgres
          EXISTS=$(psql -h 127.0.0.1 -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname='ops_evaluation';")
          if [ "$EXISTS" != "1" ]; then
            echo "Creating database ops_evaluation"
            psql -h 127.0.0.1 -U postgres -c "CREATE DATABASE ops_evaluation;"
          else
            echo "Database ops_evaluation already exists"
          fi

      - name: Build backend (Maven)
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          SPRING_DATASOURCE_URL: "jdbc:postgresql://127.0.0.1:5432/ops_evaluation"
          SPRING_DATASOURCE_USERNAME: "postgres"
          SPRING_DATASOURCE_PASSWORD: "postgres"
          HIBERNATE_DIALECT: "org.hibernate.dialect.PostgreSQLDialect"
        run: |
          chmod +x mvnw || true
          ./mvnw -B clean verify

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: ${{ env.BACKEND_DIR }}/target/*.jar

  frontend:
    name: Frontend - install & build
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Lint (if available)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          if npm run -s lint; then echo "lint ok"; else echo "lint failed" && exit 1; fi

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ${{ env.FRONTEND_DIR }}/dist

  notify:
    name: Notify on complete
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "CI finished. backend: ${{ needs.backend.result }}, frontend: ${{ needs.frontend.result }}"
